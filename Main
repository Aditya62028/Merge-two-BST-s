import java.io.*;
import java.util.*;
class Node {
    int data;
    Node left, right;
    public Node(int d) {
        data = d;
        left = right = null;
    }
}
public class GFG {
    static Node buildTree(String str) {
        if (str.length() == 0 || str.equals("N")) return null;
        String[] s = str.split(" ");
        Node root = new Node(Integer.parseInt(s[0]));
        Queue<Node> q = new LinkedList<Node>();
        q.add(root);
        int i = 1;
        while (!q.isEmpty() && i < s.length) {
            Node currNode = q.remove();
            String currVal = s[i];
            if (!currVal.equals("N")) {
                currNode.left = new Node(Integer.parseInt(currVal));
                q.add(currNode.left);
            }
            i++;
            if (i >= s.length) break;
            currVal = s[i];
            if (!currVal.equals("N")) {
                currNode.right = new Node(Integer.parseInt(currVal));
                q.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); 
        while (t > 0) {
            String s1 = br.readLine();
            Node root1 = buildTree(s1);
            String s2 = br.readLine();
            Node root2 = buildTree(s2);
            Solution solution = new Solution();
            List<Integer> result = solution.merge(root1, root2);
            for (int i = 0; i < result.size(); i++) {
                System.out.print(result.get(i) + " ");
            }
            System.out.println();
            t--;
        }
    }
}
class Solution {
    public List<Integer> merge(Node root1, Node root2) {
        List<Integer> sortedList = new ArrayList<>();
        inOrderTraversal(root1, sortedList);
        inOrderTraversal(root2, sortedList);
        Collections.sort(sortedList);
        return sortedList;
    }
    private void inOrderTraversal(Node root, List<Integer> sortedList) {
        if (root == null) return;
        inOrderTraversal(root.left, sortedList);
        sortedList.add(root.data);
        inOrderTraversal(root.right, sortedList);
    }
}
